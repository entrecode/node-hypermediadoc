{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "https://raw.githubusercontent.com/entrecode/node-hypermediadoc/master/schema/hypermediadoc.json",
  "type": "object",
  "properties": {
    "title": {
      "type": "string",
      "description": "The name of your API. Don't include the word “API” at the end."
    },
    "description": {
      "type": "string",
      "description": "Describe the purpose of your API."
    },
    "entryPoint": {
      "type": "string",
      "format": "uri",
      "description": "The main entry point of your API. Should be the only URL necessary to know for usage of your REST API."
    },
    "mediaType": {
      "type": "object",
      "description": "The main media type you use in your REST API. Should be a standard, like HAL.",
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The RFC 6838 compliant media type identifier (like `application/hal+json`)."
        },
        "name": {
          "type": "string",
          "description": "The common name of the media type."
        },
        "link": {
          "type": "string",
          "format": "uri",
          "description": "URL to the documentation of this media type."
        }
      }
    },
    "richardsonMaturityLevel": {
      "type": "integer",
      "minimum": 0,
      "maximum": 3,
      "description": "The level of REST-compliance according to the Richardson Maturity Model, see http://martinfowler.com/articles/richardsonMaturityModel.html for details."
    },
    "restExplanation": {
      "type": "string",
      "default": "This API is a *REST API,* or rather *Hypermedia API.* This means that the term *REST* is actually understood as [intended by Roy T. Fielding](http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm) – including the *Hypermedia Constraint.* See [this blog post](http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven) for a more in-depth description of REST and the difference to a simple HTTP-based API which is often mistakenly called *REST API.*\n\nIn short, data is partitioned in *resources* which manifest in *representations.* Those are transferred using a *standardized format* ([JSON HAL](https://tools.ietf.org/html/draft-kelly-json-hal-06)) with *standardized methods* (HTTP/1.1, [RFC 7230](http://tools.ietf.org/html/rfc7230)). Application flow between resources is defined by link relations. URLs are subject to change and must not be hard coded. Instead, link relations can be used to explore and use the APIs.",
      "description": "In this field you can explain how your API is meant to be used."
    },
    "moreDocContent": {
      "type": "string",
      "description": "If you have even more to tell your users than in `restExplanation`, you can use this field."
    },
    "docURLs": {
      "type": "object",
      "description": "These absolute URLs are used for making links. Ideally, `root` is something like `https://yourdomain.com/doc/`, `resources` would then be `https://yourdomain.com/doc/resources/` and `relations` would be `https://yourdomain.com/doc/relations/`.",
      "properties": {
        "root": {
          "type": "string",
          "format": "uri"
        },
        "resources": {
          "type": "string",
          "format": "uri"
        },
        "relations": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "resources": {
      "description": "Resources your API has.",
      "$ref": "#/definitions/resources"
    },
    "relations": {
      "description": "Relations your API provides.",
      "$ref": "#/definitions/relations"
    },
    "commonRelations": {
      "description": "List of common relations (those registered with IANA, http://www.iana.org/assignments/link-relations/link-relations.xhtml ) your API uses.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "required": [
    "title",
    "resources"
  ],
  "definitions": {
    "resources": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "description": "Main identifier of the resource. Should be lowercase and singular.",
            "type": "string"
          },
          "description": {
            "description": "Describe the purpose of this resource.",
            "type": "string"
          },
          "methods": {
            "description": "Methods that are allowed on this resource.",
            "$ref": "#/definitions/methods"
          },
          "embeddedResourceInListResource": {
            "description": "If you only use list resources (e.g. a single resource is represented as a list with one item), you can describe the format of the embedded single resource here.",
            "type": "object",
            "properties": {
              "schema": {
                "type": "string",
                "description": "JSON Schema identifier for the (sub-)resource"
              },
              "description": {
                "description": "You can optionally override the standard description text here.",
                "default": "This resource is always output as a list with embedded single resources.\nThe structure of an embedded single resource is as follows:",
                "type": "string"
              },
              "links": {
                "$ref": "#/definitions/linkList"
              },
              "properties": {
                "$ref": "#/definitions/propertyList"
              }
            }
          }
        },
        "required": [
          "title",
          "description"
        ]
      }
    },
    "methods": {
      "type": "array",
      "uniqueItems": false,
      "items": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "name": {
            "description": "get, put, post or delete",
            "type": "string"
          },
          "description": {
            "description": "You can describe what this method does in more detail here.",
            "type": "string"
          },
          "request": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "schema": {
                "description": "JSON Schema of the expected request body.",
                "type": "string"
              },
              "headers": {
                "type": "array",
                "description": "HTTP Headers expected in the request.",
                "items": {
                  "type": "object",
                  "properties": {
                    "header": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "optional": {
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              },
              "query": {
                "$ref": "#/definitions/propertyList"
              },
              "properties": {
                "$ref": "#/definitions/propertyList"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "responses": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "description": "HTTP status code of this response (e.g. 200, 201, 400, …)",
                  "type": "number"
                },
                "schema": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "headers": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {}
                },
                "links": {
                  "$ref": "#/definitions/linkList"
                },
                "properties": {
                  "$ref": "#/definitions/propertyList"
                },
                "embedded": {
                  "type": "array",
                  "description": "Link to the embedded resource(s).",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "href": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {}
                }
              },
              "required": [
                "code",
                "description"
              ]
            }
          }
        },
        "required": [
          "name",
          "description",
          "responses"
        ]
      }
    },
    "propertyList": {
      "type": "array",
      "uniqueItems": false,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "optional": {
            "type": "boolean",
            "default": "false"
          },
          "group": {
            "description": "Using this property, you can enable grouping of properties in separate tables. The group name will be used as title of the group.",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "optional"
        ]
      }
    },
    "linkList": {
      "type": "array",
      "uniqueItems": false,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "relation": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "methods": {
            "description": "List of allowed methods on this relation",
            "type": "array",
            "uniqueItems": false
          },
          "templated": {
            "description": "Indicate if the Link is templated according to RFC 6570.",
            "type": "boolean",
            "default": "false"
          }
        },
        "required": [
          "relation",
          "description",
          "methods",
          "templated"
        ]
      }
    },
    "relations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "href": {
                "type": "string"
              }
            }
          },
          "method": {
            "type": "string"
          },
          "templated": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}